#!/usr/bin/perl
use strict;
use warnings;
# Copyright (C) 2009-2012 Glen Pitt-Pladdy
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
#
#
# See: http://www.pitt-pladdy.com/blog/_20091031-144604_0000_SMART_stats_on_Cacti_via_SNMP_/
#
# Put SMART parameter ID on command line, prefixed by 'R' if you want raw value
#
# Put "worst" on the command line and the smallest gap to threshold of all
# parameters will be output.
#
# Version 20130114

my $FILES = '/var/local/snmp/smart';
# how should we index/identify devices
my $INDEX = 'dev';
#my $INDEX = 'serial';

# By default we assume max of 100 and scale against the threshold
# For special cases we have a database of parameters that need scaling differently
# By setting the scale to U that will be returned instead - ie. hides invalid params
my %SCALEBYFAMILY = (
	'Seagate Barracuda 7200.10' => {
#		7 => 2,		# Seek Errors has Thresh 30, but still sits mid-range on all drives
		195 => 1.429,	# ECC Recovered seems to sit about 70 on all drives TODO does this relate to capacity?
		199 => 0.5,		# UDMA CRC Errors seems to sit about 200 on all drives
	},
	'Seagate Barracuda 7200.12' => {
		1 => 0.8772,	# Raw Read Errors seems to start at 120 with thresh 6... on some
#		7 => 2,		# Seek Errors has Thresh 30, but still sits mid-range on all drives
		195 => 2,		# ECC Recovered seems to sit about 50 on all drives TODO does this relate to capacity?
		199 => 0.5,		# UDMA CRC Errors seems to sit about 200 on all drives
	},
	'Seagate Barracuda Green (Adv. Format)' => {
		1 => 0.8772,	# Raw Read Errors seems to start at 120 with thresh 6... on some
#		7 => 2,		# Seek Errors has Thresh 30, but still sits mid-range on all drives
		195 => 4,		# ECC Recovered seems to sit about 25 on all drives TODO does this relate to capacity?
		199 => 0.5,		# UDMA CRC Errors seems to sit about 200 on all drives
	},
	'WD Caviar' => {	# Generic Cav
		1 => 0.671,		# Raw Read Errors seems to sit about 200 with thresh 51
		3 => 0.478,		# Spin Up Time seems to start about 230 with thresh 21
		5 => 1.667,		# Reallocated Sectors seems to sit at 200 with tresh 140
		192 => 0.5,		# Power-Off_Retract_Count seems to sit at 200
		193 => 0.5,		# Load_Cycle_Count seems to sit at 200
		196 => 0.5,		# Reallocated Events seems to sit at 200
		197 => 0.5,		# Current_Pending_Sector seems to sit at 200
		198 => 0.5,		# Offline_Uncorrectable on Cav Black/Blue/Greens seems to sit at 200, others start 100
		199 => 0.5,		# UDMA CRC Errors seems to sit at 200
		200 => 0.5,		# Multi_Zone_Error_Rate seems to sit about 200
	},
	'SandForce Driven SSDs' => {
#		1 => 1.429,		# Raw Read Errors seems to start at 120 with thresh 50... on some
		171 => 'U',	# Program_Fail_Count is 0
		172 => 'U',	# Erase_Fail_Count is 0
		174 => 'U',	# Unexpect_Power_Loss_Ct is 0
		177 => 'U',	# Wear_Leveling_Count is 0
		181 => 'U',	# Program_Fail_Cnt_Total is 0
		182 => 'U',	# Erase_Fail_Count_Total is 0
		195 => 0.8333,	# ECC Recovered seems to start at 120... on some
#		196 => 0.8333,	# Reallocated Events seems to start at 120... on some
		201 => 0.8333,	# Soft Read Errors seems to start at 120.... on some
		204 => 0.8333,	# Soft ECC Correction seems to start at 120.... on some
		233 => 'U',	# Media_Wearout_Indicator is 0
		234 => 'U',	# Unknown_Attribute / SandForce_Internal is 0
		241 => 'U',	# Lifetime_Writes_GiB is 0
		242 => 'U',	# Lifetime_Reads_GiB is 0
	},
);
$SCALEBYFAMILY{'Seagate Barracuda 7200.12 family'} = $SCALEBYFAMILY{'Seagate Barracuda 7200.12'};	# some smartctl versions say "family"
$SCALEBYFAMILY{'Western Digital Caviar Black'} = $SCALEBYFAMILY{'WD Caviar'};
$SCALEBYFAMILY{'Western Digital Caviar Blue Serial ATA'} = $SCALEBYFAMILY{'WD Caviar'};
$SCALEBYFAMILY{'Western Digital Caviar Green'} = $SCALEBYFAMILY{'WD Caviar'};
# Newer WD Cav drives (ABYS/EURS types)
$SCALEBYFAMILY{'WD Caviar 2011+'} = $SCALEBYFAMILY{'WD Caviar'};
$SCALEBYFAMILY{'WD Caviar 2011+'}{198} = 1;	# on this model it sits around 100 normally
# specific models or aliases for families
my %SCALEBYMODEL = (
	'ST3250310AS' => $SCALEBYFAMILY{'Seagate Barracuda 7200.10'},
	'ST3500418AS' => $SCALEBYFAMILY{'Seagate Barracuda 7200.12'},	# belts & braces
	'ST31000524AS' => $SCALEBYFAMILY{'Seagate Barracuda 7200.12'},
	'ST31000528AS' => $SCALEBYFAMILY{'Seagate Barracuda 7200.12'},	# belts & braces
	'ST2000DL003-9VT166' => $SCALEBYFAMILY{'Seagate Barracuda Green (Adv. Format)'},	# belts & braces
	'WDC WD1001FALS-00J7B0' => $SCALEBYFAMILY{'Western Digital Caviar Black'},	# belts & braces
	'WDC WD5000AAKS-00A7B0' => $SCALEBYFAMILY{'Western Digital Caviar Blue Serial ATA'},	# belts & braces
	'WDC WD10EAVS-00D7B1' => $SCALEBYFAMILY{'Western Digital Caviar Green'},	# belts & braces
	'WDC WD20EARS-00MVWB0' => $SCALEBYFAMILY{'Western Digital Caviar Green'},	# belts & braces
	# newer Cav GreenPower 3TB
	'WDC WD30EURS-63SPKY0' => $SCALEBYFAMILY{'WD Caviar 2011+'},
	'OCZ-AGILITY3' => $SCALEBYFAMILY{'SandForce Driven SSDs'},
	'SAMSUNG SSD 830 Series' => {
		195 => 0.5,		# ECC Recovered seems to start at 200
		199 => 0.39525,	# UDMA CRC Errors seems to start a 253... perhaps 255?
	},
);
$SCALEBYMODEL{'SAMSUNG SSD PM830 FDE 2.5" 7mm 256GB'} = $SCALEBYMODEL{'SAMSUNG SSD 830 Series'};
$SCALEBYMODEL{'GB0250EAFYK'} = $SCALEBYFAMILY{'WD Caviar 2011+'};	# actually WD2502ABYS rebranded/different firmware


# figure out what is being requested
my $param = shift @ARGV;
my $devicelist = 0;
my $worst = 0;
my $raw;
if ( $param =~ /^worst$/i ) {
	$worst = 1;
} elsif ( $param =~ s/^[rR](\d+)$/$1/ ) {
	$raw = 1;
} elsif ( $param =~ /^\d+$/ ) {
	$raw = 0;
} elsif ( lc $param eq 'description' or lc $param eq 'devices' ) {
	# nothing to do
} else {
	die "FATAL - need the numeric parameter or 'description' to show\n";
}

# run through current drives
#tweaked for FreeNas/bsd

#opendir LS, "/dev" or die "FATAL - can't list /dev: $!\n";

my $cmd = 'sysctl -a | awk -F . \'/kern.geom.disk/ {print $4}\'';
my @drives = `$cmd`;
chomp @drives;

foreach my $drive (sort @drives) {
	# deal with missing files
	if ( ! -f "$FILES-$drive" ) {
		print "U\n";
		next;
	}
	# grab the parameter from the file
	open DR, "$FILES-$drive"
		or die "FATAL - can't read \"$FILES-$drive\": $!\n";
	my $line;
	my $family;
	my $model;
	my $serial;
	my $firmware;
	my $capacity;
	while ( defined ( $line = <DR> )
		and $line !~ /^ID#\s+ATTRIBUTE_NAME\s+FLAG\s+VALUE\s+WORST\s+THRESH/ )
		{
		if ( $line =~ /^Model Family:\s*(\w.*)$/ ) {
			$family = $1;
		} elsif ( $line =~ /^Device Model:\s*(\w.*)$/ ) {
			$model = $1;
		} elsif ( $line =~ /^Serial Number:\s*(\w.*)$/ ) {
			$serial = $1;
		} elsif ( $line =~ /^Firmware Version:\s*(\w.*)$/ ) {
			$firmware = $1;
		} elsif ( $line =~ /^User Capacity:\s*(\d[\d\,]*) bytes/ ) {
			my $cap = $1;
			my $unit = 'B';
			for ('kB','MB','GB','TB','PB') {
				if ( $cap !~ s/,\d{3}$// ) { last; }
				$unit = $_;
			}
			$capacity = "$cap $unit"
		}
	}
	if ( lc $param eq 'devices' ) {
		if ( $INDEX eq 'dev' ) {
			print "$drive\n";
		} elsif ( $INDEX eq 'serial' ) {
			print "$serial\n";
		}
		next;
	} elsif ( lc $param eq 'description' ) {
		my $description = '';
		if ( defined $model ) { $description .= " $model"; }
		if ( $INDEX eq 'dev' ) {
			if ( defined $serial ) { $description .= " (SN $serial)"; }
		} elsif ( $INDEX eq 'serial' ) {
			$description .= " ($drive)";
		}
		if ( defined $firmware ) { $description .= " [$firmware]"; }
		if ( defined $capacity ) { $description .= " $capacity"; }
		$description =~ s/^\s+//;
		print "$description\n";
		next;
	}
	my $worstcase = 255;
	my $health;
	while ( defined ( my $line = <DR> ) ) {
		chomp $line;
		if ( $line eq '' ) { last; }
		$line =~ s/^\s*//;
		my @fields = split /\s+/, $line;
		if ( $worst and $fields[3] ne '---' and $fields[5] ne '---' ) {
			$health = $fields[3] - $fields[5];
			if ( defined $family and exists $SCALEBYFAMILY{$family}
				and exists $SCALEBYFAMILY{$family}{$param} ) {
				$health *= $SCALEBYFAMILY{$family}{$param}
			} elsif ( defined $model
				and exists $SCALEBYMODEL{$model}{$param} ) {
				if ( $SCALEBYMODEL{$model}{$param} eq 'U' ) {
					$health = 'U';
				} else {
					$health *= $SCALEBYMODEL{$model}{$param}
				}
			} elsif ( $fields[5] < 100 ) {
				# we assume we can scale against 100
				$health *= 100 / ( 100 - $fields[5] )
			}
			if ( $health < $worstcase ) {
				$worstcase = $health;
			}
			next;	# go no further
		}
		if ( $fields[0] != $param ) { next; }
		if ( $raw ) {
			$health = $fields[9];
			# we want the raw value
			print "$health\n";
		} else {
			if ( $fields[3] eq '---' or $fields[5] eq '---' ) {
				print "U\n";
				last;
			}
			# how close are we to threshold?
			$health = $fields[3] - $fields[5];
			if ( defined $family
				and exists $SCALEBYFAMILY{$family}{$param} ) {
				$health *= $SCALEBYFAMILY{$family}{$param};
			} elsif ( defined $model
				and exists $SCALEBYMODEL{$model}{$param} ) {
				if ( $SCALEBYMODEL{$model}{$param} eq 'U' ) {
					$health = 'U';
				} else {
					$health *= $SCALEBYMODEL{$model}{$param};
				}
			} elsif ( $fields[5] < 100 ) {
				# we assume we can scale against 100
				$health *= 100 / ( 100 - $fields[5] );
			}
			# limit the parameter to 101
			if ( $health ne 'U' and $health > 101 ) { $health = 101; }
			print "$health\n";
			last;
		}
	}
	close DR;
	if ( $worst ) {
		print "$worstcase\n";
	} elsif ( ! defined ( $health ) ) {	# TODO this is broken - when worst is specified we should display the worst parameter - if last is undef then we get U
		# didn't get the parameter
		print "U\n";
	}
}
